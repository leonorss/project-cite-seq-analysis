2+2
getwd()
getwd()
getwd()
getwd()
search()
int(fun(x)*exp(-2*pi*i*x*f))
f <- function(x) sin(x)+cos(x)-x^2
int(f, a=0, b=2)
int(f, a=0, b=2, type="TOMS614")
#int(f, a=-Inf, b=Inf, type="Romberg", eps=0.0001, max=NULL, d=NULL, p=0)
integrate(fun(x)*exp(-2*pi*i*x*freq))
fourier <- function(fun(x),freq) {
#int(f, a=-Inf, b=Inf, type="Romberg", eps=0.0001, max=NULL, d=NULL, p=0)
integrate(fun(x)*exp(-2*pi*i*x*freq))
}
#int(f, a=-Inf, b=Inf, type="Romberg", eps=0.0001, max=NULL, d=NULL, p=0)
integrate(fun*exp(-2*pi*i*x*freq))
fun <- function(x) {}
fun <- function(x) {cos(x)}
fourier(fun,1)
fourier(fun,1)
fun <- function(x) {
cos(x)
}
fun <- function(x) {
cos(x)
}
fou <- fourier(fun,2)
fun <- function(x) {
cos(x)
}
fourier <- function(fun,freq) {
#int(f, a=-Inf, b=Inf, type="Romberg", eps=0.0001, max=NULL, d=NULL, p=0)
integrate(fun*exp(-2*pi*i*x*freq),a=-Inf, b=Inf)
}
fou <- fourier(fun,2)
fun <- function(x) {
cos(x)
}
fourier <- function(fun,freq) {
#int(f, a=-Inf, b=Inf, type="Romberg", eps=0.0001, max=NULL, d=NULL, p=0)
z <- complex(real = 0, imaginary = 1)
integrate(fun*exp(-2*pi*z*x*freq),a=-Inf, b=Inf)
}
fou <- fourier(fun,2)
clearall
fun <- function(x) {
cos(x)
}
x <- -100:0.1:100
fourier <- function(fun,freq) {
#int(f, a=-Inf, b=Inf, type="Romberg", eps=0.0001, max=NULL, d=NULL, p=0)
z <- complex(real = 0, imaginary = 1)
integrate(fun*exp(-2*pi*z*x*freq),a=-Inf, b=Inf)
}
fou <- fourier(fun,2)
x <- -100:0.1:100
x <- numeric(-100:0.1:100)
fun <- function(x) {
cos(x)
}
x <- vector(numeric,101)
x <- -100:0.1:100
fourier <- function(fun,freq) {
#int(f, a=-Inf, b=Inf, type="Romberg", eps=0.0001, max=NULL, d=NULL, p=0)
z <- complex(real = 0, imaginary = 1)
integrate(fun*exp(-2*pi*z*x*freq),a=-Inf, b=Inf)
}
fou <- fourier(fun,2)
fun <- function(x) {
cos(x)
}
x <- vector(numeric)
x <- -100:0.1:100
fourier <- function(fun,freq) {
#int(f, a=-Inf, b=Inf, type="Romberg", eps=0.0001, max=NULL, d=NULL, p=0)
z <- complex(real = 0, imaginary = 1)
integrate(fun*exp(-2*pi*z*x*freq),a=-Inf, b=Inf)
}
fou <- fourier(fun,2)
View(f)
View(f)
View(fourier)
View(fun)
x <- vector(-100:0.1:100)
x.n
x
rm(list = ls())
setwd("~/Desktop/project-cite-seq-analysis")
knitr::opts_chunk$set(echo = TRUE)
library('SingleCellExperiment')
library('DropletUtils')
BiocManager::install("DropletUtils")
yes
Yes
a
library('SingleCellExperiment')
library('DropletUtils')
library('scater')
# scater, scran, uwot
local.path <- getwd()
setwd(local.path)
patient1_HS.path <- file.path("data", "patient1_HS")
fname <- file.path(patient1_HS.path, "outs/raw_feature_bc_matrix")
sce.patient1_HS <- read10xCounts(fname, col.names=TRUE)
local.path <- getwd()
setwd(local.path)
patient1_HS.path <- file.path("data", "patient1_HS")
fname <- file.path(patient1_HS.path, "outs/raw_feature_bc_matrix")
sce.patient1_HS <- read10xCounts(fname, col.names=TRUE)
rownames(sce.patient1_HS) <- uniquifyFeatureNames(rowData(sce.patient1_HS)$ID, rowData(sce.patient1_HS)$Symbol)
library('SingleCellExperiment')
library('DropletUtils')
library('scater')
# scater, scran, uwot
local.path <- getwd()
setwd(local.path)
patient1_HS.path <- file.path("data", "patient1_HS")
fname <- file.path(patient1_HS.path, "outs/raw_feature_bc_matrix")
sce.patient1_HS <- read10xCounts(fname, col.names=TRUE)
View(sce.patient1_HS)
View(sce.patient1_HS)
rownames(sce.patient1_HS) <- uniquifyFeatureNames(rowData(sce.patient1_HS)$ID, rowData(sce.patient1_HS)$Symbol)
library('SingleCellExperiment')
library('DropletUtils')
library('scater')
#library('scuttle')
# scater, scran, uwot
# set local path
local.path <- getwd()
setwd(local.path)
patient1_HS.path <- file.path("data", "patient1_HS")
# read in unfiltered data
fname <- file.path(patient1_HS.path, "outs/raw_feature_bc_matrix")
sce.patient1_HS <- read10xCounts(fname, col.names=TRUE)
# rename genes
rownames(sce.patient1_HS) <- uniquifyFeatureNames(rowData(sce.patient1_HS)$ID, rowData(sce.patient1_HS)$Symbol)
# put antibody data in seperate summarizedExperiment inside our singleCellExperiment
sce.patient1_HS <- splitAltExps(sce.patient1_HS, rowData(sce.patient1_HS)$Type)
# altExp(sce.patient1_HS)
# from sparse to normal matrix for downstream analysis
counts(altExp(sce.patient1_HS)) <- as.matrix(counts(altExp(sce.patient1_HS)))
# remove cells that have failed to capture/sequence antibodies, remove cells that have unusually low numbers antibodies (less than or equal to half of the total number of tags)
df.ab.patient1_HS <- perCellQCMetrics(altExp(sce.patient1_HS))
# exclude antibodies with zero counts across all cells
number.nonzero.patient1_HS <- sum(!rowAlls(counts(altExp(sce.patient1_HS)), value=0L))
discard.ab.patient1_HS <- df.ab.patient1_HS$detected <= number.nonzero.patient1_HS/2
summary(discard.ab.patient1_HS)
# distribution of the number of detected antibodies across all cells, redline=threshold, below cells are discarded (looks like almost all?)
hist(df.ab.patient1_HS$detected, col='grey', main="", xlab="Number of detected Antibody-tags") + abline(v=number.nonzero.patient1_HS/2, col="red", lty=2)
# using emptyDrops
set.seed(11)
# use emptyDrops algorithm to predict which cells are probably empty
e.out.patient1_HS <- emptyDrops(counts(sce.patient1_HS), niters = 10000, test.ambient=TRUE)
# look at sum summary statistics (non-significant & limited field should be 0, otherwise ran emptyDrops again with higher niters)
summary(e.out.patient1_HS$FDR <= 0.001)
table(Sig=e.out.patient1_HS$FDR <= 0.001, Limited=e.out.patient1_HS$Limited)
# should have an approx. uniform distribution, especially at the beginning (if high peaks there, decrease lower in emptyDrops)
hist(e.out.patient1_HS$PValue[e.out.patient1_HS$Total <= limit & e.out.patient1_HS$Total > 0],
xlab="P-value", main="", col="grey80")
# using emptyDrops
set.seed(11)
# use emptyDrops algorithm to predict which cells are probably empty
e.out.patient1_HS <- emptyDrops(counts(sce.patient1_HS), niters = 10000, test.ambient=TRUE)
# look at sum summary statistics (non-significant & limited field should be 0, otherwise ran emptyDrops again with higher niters)
summary(e.out.patient1_HS$FDR <= 0.001)
table(Sig=e.out.patient1_HS$FDR <= 0.001, Limited=e.out.patient1_HS$Limited)
# should have an approx. uniform distribution, especially at the beginning (if high peaks there, decrease lower in emptyDrops)
limit <- 10
hist(e.out.patient1_HS$PValue[e.out.patient1_HS$Total <= limit & e.out.patient1_HS$Total > 0],
xlab="P-value", main="", col="grey80")
# subset sce
sce.patient1_HS <- sce.patient1_HS[, which(e.out.patient1_HS$FDR <= 0.001)]
# discard dead cells by looking at where there's high percentage of mitochondrial RNA
mito <- grep("^MT-", rowData(sce.patient1_HS)$Symbol)
df.mito.patient1_HS <- perCellQCMetrics(sce.patient1_HS, subsets=list(Mito=mito))
discard.mito.patient1_HS <- isOutlier(df.mito.patient1_HS$subsets_Mito_percent, type="higher")
# looks like quite a lot of cells?
summary(discard.mito.patient1_HS)
plot(df.mito.patient1_HS$sum, df.mito.patient1_HS$subsets_MT_percent, log="x",
xlab="Total count", ylab='Mitochondrial %') + abline(h=attr(discard.mito.patient1_HS, "thresholds")["higher"], col="red")
# using emptyDrops
set.seed(11)
# use emptyDrops algorithm to predict which cells are probably empty
e.out.patient1_HS <- emptyDrops(counts(sce.patient1_HS), niters = 10000, test.ambient=TRUE)
# using emptyDrops
set.seed(11)
# use emptyDrops algorithm to predict which cells are probably empty
e.out.patient1_HS <- emptyDrops(counts(sce.patient1_HS), niters = 10000, test.ambient=TRUE)
# using emptyDrops
set.seed(11)
# use emptyDrops algorithm to predict which cells are probably empty
e.out.patient1_HS <- emptyDrops(counts(sce.patient1_HS), niters = 10000, test.ambient=TRUE)
# remove cells that have failed to capture/sequence antibodies, remove cells that have unusually low numbers antibodies (less than or equal to half of the total number of tags)
df.ab.patient1_HS <- perCellQCMetrics(altExp(sce.patient1_HS))
# exclude antibodies with zero counts across all cells
number.nonzero.patient1_HS <- sum(!rowAlls(counts(altExp(sce.patient1_HS)), value=0L))
discard.ab.patient1_HS <- df.ab.patient1_HS$detected <= number.nonzero.patient1_HS/2
summary(discard.ab.patient1_HS)
# distribution of the number of detected antibodies across all cells, redline=threshold, below cells are discarded (looks like almost all?)
hist(df.ab.patient1_HS$detected, col='grey', main="", xlab="Number of detected Antibody-tags") + abline(v=number.nonzero.patient1_HS/2, col="red", lty=2)
knitr::opts_chunk$set(echo = TRUE)
library('SingleCellExperiment')
library('DropletUtils')
library('scater')
#library('scuttle')
# scater, scran, uwot
# set local path
local.path <- getwd()
setwd(local.path)
patient1_HS.path <- file.path("data", "patient1_HS")
# read in unfiltered data
fname <- file.path(patient1_HS.path, "outs/raw_feature_bc_matrix")
sce.patient1_HS <- read10xCounts(fname, col.names=TRUE)
# rename genes
rownames(sce.patient1_HS) <- uniquifyFeatureNames(rowData(sce.patient1_HS)$ID, rowData(sce.patient1_HS)$Symbol)
# put antibody data in seperate summarizedExperiment inside our singleCellExperiment
sce.patient1_HS <- splitAltExps(sce.patient1_HS, rowData(sce.patient1_HS)$Type)
# altExp(sce.patient1_HS)
# from sparse to normal matrix for downstream analysis
counts(altExp(sce.patient1_HS)) <- as.matrix(counts(altExp(sce.patient1_HS)))
# remove cells that have failed to capture/sequence antibodies, remove cells that have unusually low numbers antibodies (less than or equal to half of the total number of tags)
df.ab.patient1_HS <- perCellQCMetrics(altExp(sce.patient1_HS))
# exclude antibodies with zero counts across all cells
number.nonzero.patient1_HS <- sum(!rowAlls(counts(altExp(sce.patient1_HS)), value=0L))
discard.ab.patient1_HS <- df.ab.patient1_HS$detected <= number.nonzero.patient1_HS/2
summary(discard.ab.patient1_HS)
# distribution of the number of detected antibodies across all cells, redline=threshold, below cells are discarded (looks like almost all?)
hist(df.ab.patient1_HS$detected, col='grey', main="", xlab="Number of detected Antibody-tags") + abline(v=number.nonzero.patient1_HS/2, col="red", lty=2)
# using emptyDrops
set.seed(11)
# use emptyDrops algorithm to predict which cells are probably empty
e.out.patient1_HS <- emptyDrops(counts(sce.patient1_HS), niters = 10000, test.ambient=TRUE)
# look at sum summary statistics (non-significant & limited field should be 0, otherwise ran emptyDrops again with higher niters)
summary(e.out.patient1_HS$FDR <= 0.001)
table(Sig=e.out.patient1_HS$FDR <= 0.001, Limited=e.out.patient1_HS$Limited)
# should have an approx. uniform distribution, especially at the beginning (if high peaks there, decrease lower in emptyDrops)
limit <- 100
hist(e.out.patient1_HS$PValue[e.out.patient1_HS$Total <= limit & e.out.patient1_HS$Total > 0],
xlab="P-value", main="", col="grey80")
# subset sce
sce.patient1_HS <- sce.patient1_HS[, which(e.out.patient1_HS$FDR <= 0.001)]
# discard dead cells by looking at where there's high percentage of mitochondrial RNA
mito <- grep("^MT-", rowData(sce.patient1_HS)$Symbol)
df.mito.patient1_HS <- perCellQCMetrics(sce.patient1_HS, subsets=list(Mito=mito))
discard.mito.patient1_HS <- isOutlier(df.mito.patient1_HS$subsets_Mito_percent, type="higher")
# looks like quite a lot of cells?
summary(discard.mito.patient1_HS)
plot(df.mito.patient1_HS$sum, df.mito.patient1_HS$subsets_MT_percent, log="x",
xlab="Total count", ylab='Mitochondrial %') + abline(h=attr(discard.mito.patient1_HS, "thresholds")["higher"], col="red")
# discard dead cells by looking at where there's high percentage of mitochondrial RNA
mito <- grep("^MT-", rowData(sce.patient1_HS)$Symbol)
df.mito.patient1_HS <- perCellQCMetrics(sce.patient1_HS, subsets=list(Mito=mito))
discard.mito.patient1_HS <- isOutlier(df.mito.patient1_HS$subsets_Mito_percent, type="higher")
# looks like quite a lot of cells?
summary(discard.mito.patient1_HS)
plot(df.mito.patient1_HS$sum, df.mito.patient1_HS$subsets_MT_percent, log="x",
xlab="Total count", ylab='Mitochondrial %')
abline(h=attr(discard.mito.patient1_HS, "thresholds")["higher"], col="red")
# discard dead cells by looking at where there's high percentage of mitochondrial RNA
mito <- grep("^MT-", rowData(sce.patient1_HS)$Symbol)
df.mito.patient1_HS <- perCellQCMetrics(sce.patient1_HS, subsets=list(Mito=mito))
discard.mito.patient1_HS <- isOutlier(df.mito.patient1_HS$subsets_Mito_percent, type="higher")
# looks like quite a lot of cells?
summary(discard.mito.patient1_HS)
plot(df.mito.patient1_HS$sum, df.mito.patient1_HS$subsets_MT_percent, log="x", xlab="Total count", ylab='Mitochondrial %')
abline(h=attr(discard.mito.patient1_HS, "thresholds")["higher"], col="red")
# discard dead cells by looking at where there's high percentage of mitochondrial RNA
mito <- grep("^MT-", rowData(sce.patient1_HS)$Symbol)
df.mito.patient1_HS <- perCellQCMetrics(sce.patient1_HS, subsets=list(Mito=mito))
discard.mito.patient1_HS <- isOutlier(df.mito.patient1_HS$subsets_Mito_percent, type="higher")
# looks like quite a lot of cells?
summary(discard.mito.patient1_HS)
plot(df.mito.patient1_HS$sum, df.mito.patient1_HS$subsets_MT_percent, log="x", xlab="Total count", ylab='Mitochondrial %')
abline(h=attr(discard.mito.patient1_HS, "thresholds")["higher"], col="red")
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scran)
library(scater)
library(batchelor)
library(scDblFinder)
library(sctransform)
library(muscat)
library(SEtools)
library(cowplot)
library(BiocParallel)
library(ComplexHeatmap)
})
BiocManager::install("batchelor")
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scran)
library(scater)
library(batchelor)
library(scDblFinder)
library(sctransform)
library(muscat)
library(SEtools)
library(cowplot)
library(BiocParallel)
library(ComplexHeatmap)
})
BiocManager::install("scDblFinder")
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scran)
library(scater)
library(batchelor)
library(scDblFinder)
library(sctransform)
library(muscat)
library(SEtools)
library(cowplot)
library(BiocParallel)
library(ComplexHeatmap)
})
BiocManager::install("uscat")
BiocManager::install("muscat")
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scran)
library(scater)
library(batchelor)
library(scDblFinder)
library(sctransform)
library(muscat)
library(SEtools)
library(cowplot)
library(BiocParallel)
library(ComplexHeatmap)
})
BiocManager::install("SEtools")
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scran)
library(scater)
library(batchelor)
library(scDblFinder)
library(sctransform)
library(muscat)
library(SEtools)
library(cowplot)
library(BiocParallel)
library(ComplexHeatmap)
})
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scran)
library(scater)
library(batchelor)
library(scDblFinder)
library(sctransform)
library(muscat)
library(SEtools)
library(cowplot)
library(BiocParallel)
library(ComplexHeatmap)
})
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scran)
library(scater)
library(batchelor)
library(scDblFinder)
library(sctransform)
library(muscat)
library(SEtools)
library(cowplot)
library(BiocParallel)
library(ComplexHeatmap)
})
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scran)
library(scater)
library(batchelor)
library(scDblFinder)
library(sctransform)
library(muscat)
library(SEtools)
library(cowplot)
library(BiocParallel)
library(ComplexHeatmap)
})
## data can be downloaded from : http://imlspenticton.uzh.ch/dump/files_for_levesque.tar
# set local path
local.path <- getwd()
setwd(local.path)
patient1_HS.path <- file.path("data", "patient1_HS")
patient1_SCC.path <- file.path("data", "patient1_SCC")
# read in filtered data
fnameHS <- file.path(patient1_HS.path, "outs/filtered_feature_bc_matrix")
fnameSCC <- file.path(patient1_SCC.path, "outs/filtered_feature_bc_matrix")
# single cell experiment
sce.patient1_HS <- read10xCounts(fnameHS, col.names=TRUE)
sce.patient1_SCC <- read10xCounts(fnameSCC, col.names=TRUE)
#table(sce$sample_id, sce$group_id)
View(sce.patient1_HS)
## data can be downloaded from : http://imlspenticton.uzh.ch/dump/files_for_levesque.tar
# set local path
local.path <- getwd()
setwd(local.path)
patient1_HS.path <- file.path("data", "patient1_HS")
patient1_SCC.path <- file.path("data", "patient1_SCC")
# read in filtered data
fnameHS <- file.path(patient1_HS.path, "outs/filtered_feature_bc_matrix")
fnameSCC <- file.path(patient1_SCC.path, "outs/filtered_feature_bc_matrix")
# single cell experiment
sce.patient1_HS <- read10xCounts(fnameHS, col.names=TRUE)
sce.patient1_SCC <- read10xCounts(fnameSCC, col.names=TRUE)
sce.patient1_HS
#table(sce$sample_id, sce$group_id)
View(sce.patient1_HS)
sce.patient1_SCC
sce.patient1_HS
sce.patient1_SCC
sce.patient1_HS$Sample
sce.patient1_HS$Barcode
rownames(sce.patient1_HS)
genes <- rownames(sce.patient1_HS)
View(genes)
(sce.patient1_HS)$Type
View(sce.patient1_HS)
rowData(sce.patient1_HS)
rowData(sce.patient1_HS)$Type
rowdata <- rowData(sce.patient1_HS)$Type
View(rowdata)
rowdata <- rowData(sce.patient1_HS)$Type[rowData(sce.patient1_HS)$Type!='Gene Expression']
View(rowdata)
rowdata <- rowData(sce.patient1_HS)$Type['Antibody Capture']
View(rowdata)
View(sce.patient1_HS)
sce.patient1_HS[rowData(sce.patient1_HS)$Type!='Antibody Capture']
gHS <- buildKNNGraph(sce.patient1_HS, BNPARAM=AnnoyParam(), use.dimred="PCA", k=30)
# get rid of seldom detected genes
sce.patient1_HS[rowData(sce.patient1_HS)$detected>=4,]
View(sce.patient1_HS)
# run PCA
sce.patient1_HS <- runPCA(sce.patient1_HS)
# variance-stabilizing transformation
vstHS <- suppressWarnings(sctransform::vst(counts(sce.patient1_HS)))
# variance-stabilizing transformation
#vstHS <- suppressWarnings(sctransform::vst(counts(sce.patient1_HS)))
logcounts(sce.patient1_HS) <- vstHS$y
# filtering : already done
# variance-stabilizing transformation
#vstHS <- suppressWarnings(sctransform::vst(counts(sce.patient1_HS)))
logcounts(sce.patient1_HS) <- sctransform::vst(counts(sce.patient1_HS))$y
